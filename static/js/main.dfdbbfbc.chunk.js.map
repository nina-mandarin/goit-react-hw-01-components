{"version":3,"sources":["components/Profile/Profile.module.css","components/Statistics/Statistics.module.css","components/FriendList/FriendList.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Profile/Profile.js","components/Statistics/StatList.js","components/Statistics/Statistics.js","components/FriendList/FriendListItem.js","components/FriendList/FriendList.js","components/TransactionHistory/TransactionHistory.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","user","name","tag","location","avatar","stats","className","styles","profile","description","src","alt","label","quantity","followers","views","likes","defaultProps","StatList","data","statList","map","item","key","id","percentage","Statistics","title","statistics","FriendListItem","isOnline","statusActive","statusInactive","width","FriendList","friends","friendList","TransactionHistory","items","transactionHistory","headCell","type","amount","currency","bodyRow","transactionType","App","statisticalData","transactions","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfdbbfbc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-text-color\":\"#333\",\"secondary-text-color\":\"#777\",\"profile\":\"Profile_profile__uyjH-\",\"description\":\"Profile_description__1yVFU\",\"avatar\":\"Profile_avatar__orwHe\",\"name\":\"Profile_name__32rc1\",\"tag\":\"Profile_tag__2VQ-z\",\"location\":\"Profile_location__12Fxp\",\"stats\":\"Profile_stats__2yFFp\",\"label\":\"Profile_label__3l37b\",\"quantity\":\"Profile_quantity__34283\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-text-color\":\"#333\",\"statistics\":\"Statistics_statistics__D1fqc\",\"title\":\"Statistics_title__2NzEH\",\"statList\":\"Statistics_statList__1kHU0\",\"item\":\"Statistics_item__uOY-f\",\"label\":\"Statistics_label__1ZJHX\",\"percentage\":\"Statistics_percentage__1sJK4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"FriendList_friendList__1hYWv\",\"item\":\"FriendList_item__H7t7a\",\"status\":\"FriendList_status__LAAC1\",\"statusActive\":\"FriendList_statusActive__2vJ87 FriendList_status__LAAC1\",\"statusInactive\":\"FriendList_statusInactive__3AhKc FriendList_status__LAAC1\",\"avatar\":\"FriendList_avatar__1jasd\",\"name\":\"FriendList_name__3gny4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"TransactionHistory_transactionHistory__3w8-K\",\"headCell\":\"TransactionHistory_headCell__2YLA2\",\"bodyRow\":\"TransactionHistory_bodyRow__lVrK2\",\"transactionType\":\"TransactionHistory_transactionType__Qjo6K\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Profile.module.css';\n\nconst Profile = ({ user }) => {\n  const { name, tag, location, avatar, stats } = user;\n\n  return (\n    <div className={styles.profile}>\n      <div className={styles.description}>\n        <img src={avatar} alt={name} className={styles.avatar} />\n        <p className={styles.name}>{name}</p>\n        <p className={styles.tag}>@{tag}</p>\n        <p className={styles.location}>{location}</p>\n      </div>\n\n      <ul className={styles.stats}>\n        <li>\n          <span className={styles.label}>Followers</span>\n          <span className={styles.quantity}>{stats.followers}</span>\n        </li>\n        <li>\n          <span className={styles.label}>Views</span>\n          <span className={styles.quantity}>{stats.views}</span>\n        </li>\n        <li>\n          <span className={styles.label}>Likes</span>\n          <span className={styles.quantity}>{stats.likes}</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nProfile.defaultProps = {\n  user: {},\n};\n\nProfile.propTypes = {\n  user: PropTypes.object,\n};\n\nexport default Profile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Statistics.module.css';\n\nconst StatList = ({ data }) => {\n  return (\n    <ul className={styles.statList}>\n      {data.map(item => {\n        return (\n          <li className={styles.item} key={item.id}>\n            <span className={styles.label}>{item.label}</span>\n            <span className={styles.percentage}>{item.percentage}%</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nStatList.defaultProps = {\n  data: [],\n};\n\nStatList.propTypes = {\n  data: PropTypes.array,\n};\n\nexport default StatList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport StatList from './StatList';\nimport styles from './Statistics.module.css';\n\nconst Statistics = ({ title, stats }) => {\n  return (\n    <section className={styles.statistics}>\n      {title && <h2 className={styles.title}>{title}</h2>}\n      <StatList data={stats} />\n    </section>\n  );\n};\n\nStatistics.defaultProps = {\n  title: '',\n  stats: [],\n};\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.array,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './FriendList.module.css';\n\nconst FriendListItem = ({ avatar, name, isOnline }) => {\n  return (\n    <li className={styles.item}>\n      <span\n        className={isOnline ? styles.statusActive : styles.statusInactive}\n      />\n      <img className={styles.avatar} src={avatar} alt={name} width=\"48\" />\n      <p className={styles.name}>{name}</p>\n    </li>\n  );\n};\n\nFriendListItem.defaultProps = {\n  avatar: '',\n  name: '',\n  isOnline: false,\n};\n\nFriendListItem.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string,\n  isOnline: PropTypes.bool,\n};\n\nexport default FriendListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FriendListItem from './FriendListItem';\n\nimport styles from './FriendList.module.css';\n\nconst FriendList = ({ friends }) => {\n  return (\n    <ul className={styles.friendList}>\n      {friends.map(({ id, name, avatar, isOnline }) => {\n        return (\n          <FriendListItem\n            key={id}\n            name={name}\n            avatar={avatar}\n            isOnline={isOnline}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nFriendList.defaultProps = {\n  friends: [],\n};\n\nFriendList.propTypes = {\n  friends: PropTypes.array,\n};\n\nexport default FriendList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className={styles.transactionHistory}>\n      <thead>\n        <tr>\n          <th className={styles.headCell}>Type</th>\n          <th className={styles.headCell}>Amount</th>\n          <th className={styles.headCell}>Currency</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {items.map(({ id, type, amount, currency }) => {\n          return (\n            <tr key={id} className={styles.bodyRow}>\n              <td className={styles.transactionType}>{type}</td>\n              <td>{amount}</td>\n              <td>{currency}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.defaultProps = {\n  items: [],\n};\n\nTransactionHistory.propTypes = {\n  items: PropTypes.array,\n};\n\nexport default TransactionHistory;\n","import React from 'react';\n\nimport Profile from './Profile';\nimport Statistics from './Statistics';\nimport FriendList from './FriendList';\nimport TransactionHistory from './TransactionHistory';\n\nimport user from '../data/user.json';\nimport statisticalData from '../data/statistical-data.json';\nimport friends from '../data/friends.json';\nimport transactions from '../data/transactions.json';\n\nfunction App() {\n  return (\n    <>\n      <Profile user={user} />\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\n      <FriendList friends={friends} />\n      <TransactionHistory items={transactions} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}